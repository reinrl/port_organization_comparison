[
  {
    "_id": "integration_SSlPAoOQN4Qly5Yr",
    "_orgId": "org_9bvYw5M5jLQvJ9G8",
    "changelogDestination": {},
    "clientId": "",
    "config": {
      "createMissingRelatedEntities": false,
      "deleteDependentEntities": true,
      "enableMergeEntity": true,
      "resources": [
        {
          "kind": "project",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"project\"",
                "identifier": ".id | gsub(\" \"; \"\")",
                "properties": {
                  "defaultTeam": ".defaultTeam.name",
                  "link": ".url | gsub(\"_apis/projects/\"; \"\")",
                  "project_title": ".name",
                  "revision": ".revision",
                  "state": ".state",
                  "visibility": ".visibility"
                },
                "title": ".name"
              }
            }
          },
          "selector": {
            "defaultTeam": true,
            "query": ".name==\"Federated Projects\""
          }
        },
        {
          "kind": "pull-request",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"azure_dev_ops_pull_request\"",
                "description": ".description",
                "identifier": "\"\\(.repository.project.name | ascii_downcase | gsub(\"[ ();]\"; \"\"))/\\(.repository.name | ascii_downcase | gsub(\"[ ();]\"; \"\"))/\\(.pullRequestId)\"",
                "properties": {
                  "created_by": ".createdBy.uniqueName | ascii_downcase?",
                  "merge_status": ".mergeStatus",
                  "project_title": ".repository.project.name",
                  "pull_request_id": ".pullRequestId",
                  "reviewers": ".reviewers | map(.uniqueName | ascii_downcase)",
                  "source_branch": ".sourceRefName | gsub(\"refs/heads/\"; \"\")",
                  "status": ".status",
                  "target_branch": ".targetRefName | gsub(\"refs/heads/\"; \"\")"
                },
                "relations": {
                  "repository": "\"\\(.repository.project.name | ascii_downcase | gsub(\"[ ();]\"; \"\"))/\\(.repository.name | ascii_downcase | gsub(\"[ ();]\"; \"\"))\"            "
                },
                "title": ".title"
              }
            }
          },
          "selector": {
            "query": ".repository.project.name==\"Federated Projects\" and .status==\"active\""
          }
        },
        {
          "kind": "repository-policy",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"service\"",
                "identifier": "\"\\(.__repository.project.name | ascii_downcase | gsub(\"[ ();]\"; \"\"))/\\(.__repository.name | ascii_downcase | gsub(\"[ ();]\"; \"\"))\"",
                "properties": {
                  "minimumApproverCount": ".settings.minimumApproverCount"
                }
              }
            }
          },
          "selector": {
            "query": ".project.name==\"Federated Projects\" and .type.displayName==\"Minimum number of reviewers\""
          }
        },
        {
          "kind": "repository-policy",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"service\"",
                "identifier": "\"\\(.__repository.project.name | ascii_downcase | gsub(\"[ ();]\"; \"\"))/\\(.__repository.name | ascii_downcase | gsub(\"[ ();]\"; \"\"))\"",
                "properties": {
                  "workItemLinking": ".isEnabled and .isBlocking"
                }
              }
            }
          },
          "selector": {
            "query": ".project.name==\"Federated Projects\" and .type.displayName==\"Work item linking\""
          }
        },
        {
          "kind": "repository",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"service\"",
                "identifier": "\"\\(.project.name | ascii_downcase | gsub(\"[ ();]\"; \"\"))/\\(.name | ascii_downcase | gsub(\"[ ();]\"; \"\"))\"",
                "properties": {
                  "default_branch": "(.defaultBranch // \"\") | gsub(\"refs/heads/\"; \"\")",
                  "readme": "file://README.md",
                  "url": ".webUrl"
                },
                "relations": {
                  "ado_repo_to_team": ".name | split(\"_\") | .[0] | ascii_downcase",
                  "project": ".project.id | gsub(\" \"; \"\")"
                },
                "title": ".name"
              }
            }
          },
          "selector": {
            "query": ".project.name==\"Federated Projects\""
          }
        },
        {
          "kind": "team",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"ado_team\"",
                "identifier": "\"\\(.projectName | ascii_downcase | gsub(\"[ ();]\"; \"\"))/\\(.name | ascii_downcase | gsub(\"[ ();]\"; \"\"))\"",
                "properties": {
                  "name": ".name"
                },
                "relations": {
                  "project": ".projectId | gsub(\" \"; \"\")"
                },
                "title": ".name"
              }
            }
          },
          "selector": {
            "query": ".projectName==\"Federated Projects\""
          }
        }
      ]
    },
    "identifier": "azure-devops",
    "installationAppType": "azure-devops",
    "installationId": "azure-devops",
    "installationType": "Saas",
    "integrationType": "azure-devops",
    "logAttributes": {
      "ingestId": "vPRBZWBASzzNSp3u",
      "ingestUrl": "https://ingest.getport.io/logs/integration/vPRBZWBASzzNSp3u"
    },
    "resyncState": {
      "intervalInMinuets": 120,
      "lastResyncEnd": "2025-04-17T16:00:00.813874+00:00",
      "lastResyncStart": "2025-04-17T15:25:09.565761+00:00",
      "nextResync": "2025-04-17T17:37:56.405000+00:00",
      "status": "completed",
      "updatedAt": "2025-04-17T16:00:00.821Z"
    },
    "spec": {
      "appSpec": {
        "liveEventsEnabled": false,
        "scheduledResyncInterval": "2h",
        "sendRawDataExamples": true
      },
      "integrationSpec": {
        "isProjectsLimited": false,
        "organizationUrl": "_AZURE_DEVOPS_ORGANIZATION_URL",
        "personalAccessToken": "_AZURE_DEVOPS_PERSONAL_ACCESS_TOKEN"
      }
    },
    "statusInfo": {
      "createdAt": "2025-01-29T14:48:36.641Z",
      "integrationStatus": {
        "lastSyncedAt": "2025-04-04T15:40:28Z",
        "status": "Running"
      },
      "updatedAt": "2025-04-04T15:37:56.405Z"
    },
    "version": "0.1.146"
  },
  {
    "_id": "integration_wE0l4RWENY4Fx8Y9",
    "_orgId": "org_9bvYw5M5jLQvJ9G8",
    "changelogDestination": {},
    "clientId": "",
    "config": {
      "createMissingRelatedEntities": false,
      "deleteDependentEntities": true,
      "enableMergeEntity": true,
      "resources": [
        {
          "kind": "entity",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"dynatraceEntity\"",
                "identifier": ".entityId",
                "properties": {
                  "firstSeenTs": ".firstSeenTms / 1000 | strftime(\"%Y-%m-%d\")",
                  "is_production": "false",
                  "management_zones": ".managementZones | map(.stringRepresentation)",
                  "tags": ".tags | map(.stringRepresentation)",
                  "type": ".type"
                },
                "relations": {
                  "dynatrace_teams": ".tags | map(select(.key == \"dt.owner\") | .value | ascii_downcase)",
                  "namespace": ".toRelationships.isNamespaceOfCa | if length > 0 then .[0].id else null end"
                },
                "title": ".displayName"
              }
            }
          },
          "selector": {
            "entityFields": "firstSeenTms,tags,properties,managementZones,fromRelationships,toRelationships",
            "entityTypes": [
              "CLOUD_APPLIATION"
            ],
            "query": "true"
          }
        },
        {
          "kind": "entity",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"dynatraceEntity\"",
                "identifier": ".entityId",
                "properties": {
                  "firstSeenTs": ".firstSeenTms / 1000 | strftime(\"%Y-%m-%d\")",
                  "is_production": "false",
                  "management_zones": ".managementZones | map(.stringRepresentation)",
                  "tags": ".tags | map(.stringRepresentation)",
                  "type": ".type"
                },
                "relations": {
                  "dynatrace_teams": ".tags | map(select(.key == \"dt.owner\") | .value | ascii_downcase)",
                  "namespace": "if .type | startswith(\"CLOUD\") then .entityId else null end",
                  "service": "if .type | startswith(\"SERVICE\") then .entityId else null end"
                },
                "title": ".displayName"
              }
            }
          },
          "selector": {
            "entityFields": "firstSeenTms,tags,properties,managementZones,fromRelationships,toRelationships",
            "entityTypes": [
              "APPLICATION",
              "CLOUD_APPLIATION_NAMESPACE",
              "HOST",
              "SERVICE"
            ],
            "query": "true"
          }
        }
      ]
    },
    "identifier": "dyn-dev-entity",
    "installationAppType": "dynatrace",
    "installationId": "dyn-dev-entity",
    "installationType": "Saas",
    "integrationType": "dynatrace",
    "logAttributes": {
      "ingestId": "ZrQjSIPu2Q69veQ3",
      "ingestUrl": "https://ingest.getport.io/logs/integration/ZrQjSIPu2Q69veQ3"
    },
    "resyncState": {
      "intervalInMinuets": 240,
      "lastResyncEnd": "2025-04-17T15:22:05.006780+00:00",
      "lastResyncStart": "2025-04-17T14:23:38.072944+00:00",
      "nextResync": "2025-04-17T16:19:26.708000+00:00",
      "status": "failed",
      "updatedAt": "2025-04-17T15:22:05.012Z"
    },
    "spec": {
      "appSpec": {
        "liveEventsEnabled": false,
        "scheduledResyncInterval": "4h",
        "sendRawDataExamples": true
      },
      "integrationSpec": {
        "dynatraceApiKey": "_DYNATRACE_DEV_DYNATRACE_API_KEY",
        "dynatraceHostUrl": "https://elq45057.live.dynatrace.com"
      }
    },
    "statusInfo": {
      "createdAt": "2025-04-10T20:16:15.814Z",
      "integrationStatus": {
        "lastSyncedAt": "2025-04-10T20:19:53Z",
        "status": "Running"
      },
      "updatedAt": "2025-04-10T20:19:26.708Z"
    },
    "version": "0.1.119"
  },
  {
    "_id": "integration_0R3GQdopNo9OzB0R",
    "_orgId": "org_9bvYw5M5jLQvJ9G8",
    "changelogDestination": {},
    "clientId": "",
    "config": {
      "createMissingRelatedEntities": false,
      "deleteDependentEntities": true,
      "enableMergeEntity": true,
      "resources": [
        {
          "kind": "slo",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"dynatraceSlo\"",
                "identifier": ".id",
                "properties": {
                  "enabled": ".enabled",
                  "error": ".error",
                  "errorBudget": ".errorBudget",
                  "evaluatedPercentage": ".evaluatedPercentage",
                  "evaluationType": ".evaluationType",
                  "filter": ".filter",
                  "status": ".status",
                  "target": ".target",
                  "warning": ".warning"
                },
                "relations": {
                  "entities": "if .__entities != null then .__entities | map(.entityId) else [] end"
                },
                "title": ".name"
              }
            }
          },
          "selector": {
            "attachRelatedEntities": true,
            "query": "true"
          }
        }
      ]
    },
    "identifier": "dyn-dev-slo",
    "installationAppType": "dynatrace",
    "installationId": "dyn-dev-slo",
    "installationType": "Saas",
    "integrationType": "dynatrace",
    "logAttributes": {
      "ingestId": "8jASinIcE8BGT2Qj",
      "ingestUrl": "https://ingest.getport.io/logs/integration/8jASinIcE8BGT2Qj"
    },
    "resyncState": {
      "intervalInMinuets": 240,
      "lastResyncEnd": "2025-04-17T12:27:23.010512+00:00",
      "lastResyncStart": "2025-04-17T12:27:09.774608+00:00",
      "nextResync": "2025-04-17T14:51:48.422000+00:00",
      "status": "completed",
      "updatedAt": "2025-04-17T12:27:23.104Z"
    },
    "spec": {
      "appSpec": {
        "liveEventsEnabled": false,
        "scheduledResyncInterval": "4h",
        "sendRawDataExamples": true
      },
      "integrationSpec": {
        "dynatraceApiKey": "_DYNATRACE_DEV_DYNATRACE_API_KEY",
        "dynatraceHostUrl": "https://elq45057.live.dynatrace.com"
      }
    },
    "statusInfo": {
      "createdAt": "2025-04-10T20:12:25.789Z",
      "integrationStatus": {
        "lastSyncedAt": "2025-04-11T14:52:02Z",
        "status": "Running"
      },
      "updatedAt": "2025-04-11T14:51:48.422Z"
    },
    "version": "0.1.119"
  },
  {
    "_id": "integration_0igPm4NQwUItlOHA",
    "_orgId": "org_9bvYw5M5jLQvJ9G8",
    "changelogDestination": {},
    "clientId": "",
    "config": {
      "createMissingRelatedEntities": false,
      "deleteDependentEntities": true,
      "enableMergeEntity": true,
      "resources": [
        {
          "kind": "entity",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"dynatraceEntity\"",
                "identifier": ".entityId",
                "properties": {
                  "firstSeenTs": ".firstSeenTms / 1000 | strftime(\"%Y-%m-%d\")",
                  "is_production": true,
                  "lastSeenTs": ".lastSeenTms / 1000 | strftime(\"%Y-%m-%d\")",
                  "management_zones": ".managementZones[].stringRepresentation",
                  "tags": ".tags[].stringRepresentation",
                  "type": ".type"
                },
                "title": ".displayName"
              }
            }
          },
          "selector": {
            "entityFields": "firstSeenTms,lastSeenTms,tags,properties,managementZones,fromRelationships,toRelationships",
            "entityTypes": [
              "APPLICATION",
              "CLOUD_APPLIATION_NAMESPACE",
              "HOST",
              "SERVICE"
            ],
            "query": "true"
          }
        },
        {
          "kind": "entity",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"dynatraceEntity\"",
                "identifier": ".entityId",
                "relations": {
                  "cloud_application": ".entityId"
                },
                "title": ".displayName"
              }
            }
          },
          "selector": {
            "entityFields": null,
            "entityTypes": [
              "CLOUD_APPLIATION_NAMESPACE"
            ],
            "query": "true"
          }
        }
      ]
    },
    "identifier": "dyn-prod-entities",
    "installationAppType": "dynatrace",
    "installationId": "dyn-prod-entities",
    "installationType": "Saas",
    "integrationType": "dynatrace",
    "logAttributes": {
      "ingestId": "7N6hJJoIRyvi2n91",
      "ingestUrl": "https://ingest.getport.io/logs/integration/7N6hJJoIRyvi2n91"
    },
    "resyncState": {
      "intervalInMinuets": 240,
      "lastResyncEnd": "2025-04-17T13:13:11.597748+00:00",
      "lastResyncStart": "2025-04-17T13:05:25.850777+00:00",
      "nextResync": "2025-04-17T15:52:11.884000+00:00",
      "status": "failed",
      "updatedAt": "2025-04-17T13:13:11.717Z"
    },
    "spec": {
      "appSpec": {
        "liveEventsEnabled": false,
        "scheduledResyncInterval": "4h",
        "sendRawDataExamples": true
      },
      "integrationSpec": {
        "dynatraceApiKey": "_DYNATRACE_PROD_DYNATRACE_API_KEY",
        "dynatraceHostUrl": "https://aig80554.live.dynatrace.com"
      }
    },
    "statusInfo": {
      "createdAt": "2025-04-10T20:35:51.221Z",
      "integrationStatus": {
        "lastSyncedAt": "2025-04-11T11:52:48Z",
        "message": "Fail to create Integration",
        "status": "Running"
      },
      "updatedAt": "2025-04-11T11:52:11.884Z"
    },
    "version": "0.1.119"
  },
  {
    "_id": "integration_CytAqwdiDuSJTwLR",
    "_orgId": "org_9bvYw5M5jLQvJ9G8",
    "changelogDestination": {},
    "clientId": "",
    "config": {
      "createMissingRelatedEntities": true,
      "deleteDependentEntities": true,
      "enableMergeEntity": true,
      "resources": [
        {
          "kind": "slo",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"dynatraceSlo\"",
                "identifier": ".id",
                "properties": {
                  "enabled": ".enabled",
                  "error": ".error",
                  "errorBudget": ".errorBudget",
                  "evaluatedPercentage": ".evaluatedPercentage",
                  "evaluationType": ".evaluationType",
                  "filter": ".filter",
                  "status": ".status",
                  "target": ".target",
                  "warning": ".warning"
                },
                "relations": {
                  "entities": "if .__entities != null then .__entities | map(.entityId) else [] end"
                },
                "title": ".name"
              }
            }
          },
          "selector": {
            "attachRelatedEntities": true,
            "query": "true"
          }
        }
      ]
    },
    "identifier": "dyn-prod-slo",
    "installationAppType": "dynatrace",
    "installationId": "dyn-prod-slo",
    "installationType": "Saas",
    "integrationType": "dynatrace",
    "logAttributes": {
      "ingestId": "m4i6lJWifLSscw02",
      "ingestUrl": "https://ingest.getport.io/logs/integration/m4i6lJWifLSscw02"
    },
    "resyncState": {
      "intervalInMinuets": 240,
      "lastResyncEnd": "2025-04-17T13:16:18.085951+00:00",
      "lastResyncStart": "2025-04-17T13:14:29.962709+00:00",
      "nextResync": "2025-04-17T16:02:19.210000+00:00",
      "status": "failed",
      "updatedAt": "2025-04-17T13:16:18.109Z"
    },
    "spec": {
      "appSpec": {
        "liveEventsEnabled": false,
        "scheduledResyncInterval": "4h",
        "sendRawDataExamples": true
      },
      "integrationSpec": {
        "dynatraceApiKey": "_DYNATRACE_PROD_DYNATRACE_API_KEY",
        "dynatraceHostUrl": "https://aig80554.live.dynatrace.com"
      }
    },
    "statusInfo": {
      "createdAt": "2025-04-10T20:36:22.341Z",
      "integrationStatus": {
        "lastSyncedAt": "2025-04-14T12:02:35Z",
        "message": "Fail to patch Integration",
        "status": "Running"
      },
      "updatedAt": "2025-04-14T12:02:19.210Z"
    },
    "version": "0.1.119"
  },
  {
    "_id": "integration_8zpMEHxwhNNiuCGl",
    "_orgId": "org_9bvYw5M5jLQvJ9G8",
    "changelogDestination": {},
    "clientId": "",
    "config": {
      "createMissingRelatedEntities": false,
      "deleteDependentEntities": true,
      "enableMergeEntity": true,
      "resources": [
        {
          "kind": "team",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"dynatraceTeam\"",
                "identifier": ".value.identifier | ascii_downcase",
                "properties": {
                  "additionalDetails": ".value.additionalInformation",
                  "description": ".value.descriptions",
                  "emailContact": ".value.contactDetails[] | select(.integrationType == \"EMAIL\") | .email",
                  "is_production": "false",
                  "links": "[.value.links[] | .url]",
                  "productivityToolsContact": "[.value.contactDetails[] | select(.integrationType != \"EMAIL\" and .url != null) | .url]",
                  "responsibilities": ".value.responsibilities"
                },
                "title": ".value.name"
              }
            }
          },
          "selector": {
            "query": "true"
          }
        },
        {
          "kind": "team",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"dynatraceTeam\"",
                "identifier": ".value.identifier | ascii_downcase",
                "relations": {
                  "service_now_group": "if .value.identifier | length == 32 then .value.identifier else null end"
                },
                "title": ".value.name"
              }
            }
          },
          "selector": {
            "query": "true"
          }
        }
      ]
    },
    "identifier": "dyn-prod-team",
    "installationAppType": "dynatrace",
    "installationId": "dyn-prod-team",
    "installationType": "Saas",
    "integrationType": "dynatrace",
    "logAttributes": {
      "ingestId": "R1Ug2sgcZ0JWvu13",
      "ingestUrl": "https://ingest.getport.io/logs/integration/R1Ug2sgcZ0JWvu13"
    },
    "resyncState": {
      "intervalInMinuets": 240,
      "lastResyncEnd": "2025-04-17T16:03:04.692808+00:00",
      "lastResyncStart": "2025-04-17T16:02:57.332195+00:00",
      "nextResync": "2025-04-17T20:02:56.423000+00:00",
      "status": "completed",
      "updatedAt": "2025-04-17T16:03:04.727Z"
    },
    "spec": {
      "appSpec": {
        "liveEventsEnabled": false,
        "scheduledResyncInterval": "4h",
        "sendRawDataExamples": true
      },
      "integrationSpec": {
        "dynatraceApiKey": "_DYNATRACE_DEV_DYNATRACE_API_KEY",
        "dynatraceHostUrl": "https://elq45057.apps.dynatrace.com"
      }
    },
    "statusInfo": {
      "createdAt": "2025-04-14T12:02:53.046Z",
      "integrationStatus": {
        "lastSyncedAt": "2025-04-17T16:03:09Z",
        "status": "Running"
      },
      "updatedAt": "2025-04-17T16:02:56.423Z"
    },
    "version": "0.1.119"
  },
  {
    "_id": "integration_QqdbWOk2UMpQLuo6",
    "_orgId": "org_9bvYw5M5jLQvJ9G8",
    "changelogDestination": {},
    "clientId": "",
    "config": {
      "createMissingRelatedEntities": true,
      "deleteDependentEntities": true,
      "enableMergeEntity": true,
      "entityDeletionThreshold": 0,
      "resources": [
        {
          "kind": "copilot-organization-metrics",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"github_copilot_usage_by_lang\"",
                "identifier": "(.__organization.login + \"__\" + .item.name + \"@\" + .date)",
                "properties": {
                  "language": ".item.name",
                  "total_acceptances_count": ".item.total_code_acceptances",
                  "total_engaged_users": ".item.total_engaged_users",
                  "total_lines_accepted": ".item.total_code_lines_accepted",
                  "total_lines_suggested": ".item.total_code_lines_suggested",
                  "total_suggestions_count": ".item.total_code_suggestions"
                },
                "relations": {
                  "git_hub_copilot_usage": "(.__organization.login + \"@\" + .date)"
                },
                "title": "(.__organization.login + \" copilot-metrics (\" + .item.name + \") \" + .date)"
              }
            },
            "itemsToParse": ".copilot_ide_code_completions.editors[]?.models[]?.languages"
          },
          "selector": {
            "query": "true"
          }
        },
        {
          "kind": "copilot-organization-metrics",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"github_copilot_usage\"",
                "identifier": "(.__organization.login + \"@\" + .date)",
                "properties": {
                  "breakdown": ".",
                  "git_hub_org": ".__organization.login",
                  "record_date": ".date  + \"T00:00:00Z\"",
                  "record_date_to_millis": ".date  + \"T00:00:00Z\" | strptime(\"%Y-%m-%dT%H:%M:%SZ\") | mktime",
                  "total_acceptances_count": "[.copilot_ide_code_completions.editors[]?.models[]?.languages[]?.total_code_acceptances] | map(select(. != null)) | add",
                  "total_active_chat_users": "[.copilot_ide_chat.editors[]?.total_engaged_users // 0] | map(select(. != null)) | add",
                  "total_active_users": ".total_active_users",
                  "total_chat_acceptances": "[\n  (.copilot_ide_chat.editors[]?.models[]?.total_chat_copy_events // 0),\n  (.copilot_ide_chat.editors[]?.models[]?.total_chat_insertion_events // 0)\n] | map(select(. != null)) | add",
                  "total_chat_turns": "[.copilot_ide_chat.editors[]?.models[]?.total_chats // 0] | map(select(. != null)) | add",
                  "total_engaged_users": ".total_engaged_users",
                  "total_lines_accepted": "[.copilot_ide_code_completions.editors[]?.models[]?.languages[]?.total_code_lines_accepted] | map(select(. != null)) | add",
                  "total_lines_suggested": "[.copilot_ide_code_completions.editors[]?.models[]?.languages[]?.total_code_lines_suggested] | map(select(. != null)) | add",
                  "total_suggestions_count": "[.copilot_ide_code_completions.editors[]?.models[]?.languages[]?.total_code_suggestions] | map(select(. != null) ) | add"
                },
                "title": "(.__organization.login + \" copilot-metrics \" + .date)"
              }
            }
          },
          "selector": {
            "query": "true"
          }
        },
        {
          "kind": "copilot-team-metrics",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"github_copilot_usage\"",
                "identifier": "(.__team.slug + \"@\" + .date)",
                "properties": {
                  "breakdown": ".",
                  "git_hub_org": ".__organization.login",
                  "git_hub_team": ".__team.slug",
                  "record_date": ".date  + \"T00:00:00Z\"",
                  "record_date_to_millis": ".date  + \"T00:00:00Z\" | strptime(\"%Y-%m-%dT%H:%M:%SZ\") | mktime",
                  "total_acceptances_count": "[.copilot_ide_code_completions.editors[]?.models[]?.languages[]?.total_code_acceptances] | map(select(. != null)) | add",
                  "total_active_chat_users": "[.copilot_ide_chat.editors[]?.total_engaged_users // 0] | map(select(. != null)) | add",
                  "total_active_users": ".total_active_users",
                  "total_chat_acceptances": "[\n  (.copilot_ide_chat.editors[]?.models[]?.total_chat_copy_events // 0),\n  (.copilot_ide_chat.editors[]?.models[]?.total_chat_insertion_events // 0)\n] | map(select(. != null)) | add",
                  "total_chat_turns": "[.copilot_ide_chat.editors[]?.models[]?.total_chats // 0] | map(select(. != null)) | add",
                  "total_engaged_users": ".total_engaged_users",
                  "total_lines_accepted": "[.copilot_ide_code_completions.editors[]?.models[]?.languages[]?.total_code_lines_accepted] | map(select(. != null)) | add",
                  "total_lines_suggested": "[.copilot_ide_code_completions.editors[]?.models[]?.languages[]?.total_code_lines_suggested] | map(select(. != null)) | add",
                  "total_suggestions_count": "[.copilot_ide_code_completions.editors[]?.models[]?.languages[]?.total_code_suggestions] | map(select(. != null) ) | add"
                },
                "title": "(.__team.slug + \" copilot-metrics \" + .date)"
              }
            }
          },
          "selector": {
            "query": "true"
          }
        }
      ]
    },
    "identifier": "github-copilot",
    "installationAppType": "github-copilot",
    "installationId": "github-copilot",
    "installationType": "Saas",
    "integrationType": "github-copilot",
    "logAttributes": {
      "ingestId": "JrL7e09394khphui",
      "ingestUrl": "https://ingest.getport.io/logs/integration/JrL7e09394khphui"
    },
    "resyncState": {
      "intervalInMinuets": 240,
      "lastResyncEnd": "2025-04-17T12:42:29.020715+00:00",
      "lastResyncStart": "2025-04-17T12:42:08.202919+00:00",
      "nextResync": "2025-04-17T16:36:17.661000+00:00",
      "status": "completed",
      "updatedAt": "2025-04-17T12:42:29.226Z"
    },
    "spec": {
      "appSpec": {
        "liveEventsEnabled": false,
        "scheduledResyncInterval": "4h",
        "sendRawDataExamples": true
      },
      "integrationSpec": {
        "githubHost": "https://api.github.com",
        "githubToken": "_GITHUB_COPILOT_GITHUB_TOKEN"
      }
    },
    "statusInfo": {
      "createdAt": "2025-04-08T20:36:17.661Z",
      "integrationStatus": {
        "lastSyncedAt": "2025-04-08T20:43:48Z",
        "status": "Running"
      },
      "updatedAt": "2025-04-08T20:36:17.661Z"
    },
    "version": "0.1.3"
  },
  {
    "_id": "integration_oSn5MjIAPj9hk1SQ",
    "_orgId": "org_9bvYw5M5jLQvJ9G8",
    "changelogDestination": {},
    "clientId": "",
    "config": {
      "createMissingRelatedEntities": true,
      "deleteDependentEntities": true,
      "enableMergeEntity": true,
      "resources": [
        {
          "kind": "incident",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"opsGenieIncident\"",
                "identifier": ".id",
                "properties": {
                  "createdAt": ".createdAt",
                  "description": ".description",
                  "priority": ".priority",
                  "status": ".status",
                  "tags": ".tags",
                  "updatedAt": ".updatedAt"
                },
                "relations": {
                  "respondingTeam": ".responders | [.[] | select(.type == \"team\") | .id]",
                  "services": ".impactedServices"
                },
                "title": ".message"
              }
            }
          },
          "selector": {
            "apiQueryParams": {
              "status": "open"
            },
            "query": ".createdAt > (now - 30*24*60*60 | strflocaltime(\"%Y-%m-%dT%H:%M:%S\"))"
          }
        },
        {
          "kind": "schedule",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"opsGenieRotation\"",
                "identifier": ".id + \"_\" + .item.id",
                "properties": {
                  "description": ".item.name",
                  "endDate": ".item.endDate",
                  "rotationType": ".item.type",
                  "startDate": ".item.startDate",
                  "users": "[.item.participants[] | select(has(\"username\")) | .username]"
                },
                "relations": {
                  "schedule": ".id"
                },
                "title": ".item.name"
              }
            },
            "itemsToParse": ".rotations"
          },
          "selector": {
            "apiQueryParams": {
              "expand": "rotation"
            },
            "query": "true"
          }
        },
        {
          "kind": "schedule",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"opsGenieSchedule\"",
                "identifier": ".id",
                "properties": {
                  "description": ".name",
                  "timezone": ".timezone"
                },
                "relations": {
                  "ownerTeam": ".ownerTeam.id"
                },
                "title": ".name"
              }
            }
          },
          "selector": {
            "query": "true"
          }
        },
        {
          "kind": "service",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"opsGenieService\"",
                "identifier": ".id",
                "properties": {
                  "description": ".description",
                  "tags": ".tags"
                },
                "relations": {
                  "ownerTeam": ".teamId"
                },
                "title": ".name"
              }
            }
          },
          "selector": {
            "query": "true"
          }
        },
        {
          "kind": "team",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"opsGenieTeam\"",
                "identifier": ".id",
                "properties": {
                  "description": ".description",
                  "team_members": "if .__members != null then .__members | map(.user.username) else [] end"
                },
                "relations": {
                  "members": "if .__members != null then .__members | map(.user.id) else [] end"
                },
                "title": ".name"
              }
            }
          },
          "selector": {
            "includeMembers": true,
            "query": "true"
          }
        },
        {
          "kind": "user",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"opsGenieUser\"",
                "identifier": ".id",
                "properties": {
                  "address": ".userAddress",
                  "createdAt": ".createdAt",
                  "email": ".username",
                  "isBlocked": ".blocked",
                  "isVerified": ".verified",
                  "role": ".role.name",
                  "timeZone": ".timeZone"
                },
                "title": ".fullName"
              }
            }
          },
          "selector": {
            "query": "true"
          }
        }
      ]
    },
    "identifier": "opsgenie",
    "installationAppType": "opsgenie",
    "installationId": "opsgenie",
    "installationType": "Saas",
    "integrationType": "opsgenie",
    "logAttributes": {
      "ingestId": "DdhqrCggR62HqaCp",
      "ingestUrl": "https://ingest.getport.io/logs/integration/DdhqrCggR62HqaCp"
    },
    "resyncState": {
      "intervalInMinuets": 1440,
      "lastResyncEnd": "2025-04-17T14:13:50.276658+00:00",
      "lastResyncStart": "2025-04-17T14:13:08.512669+00:00",
      "nextResync": "2025-04-18T14:13:27.847000+00:00",
      "status": "completed",
      "updatedAt": "2025-04-17T14:13:50.363Z"
    },
    "spec": {
      "appSpec": {
        "liveEventsEnabled": false,
        "scheduledResyncInterval": "24h",
        "sendRawDataExamples": true
      },
      "integrationSpec": {
        "apiToken": "_OPSGENIE_API_TOKEN",
        "apiUrl": "https://api.opsgenie.com"
      }
    },
    "statusInfo": {
      "createdAt": "2024-11-07T21:12:36.186Z",
      "integrationStatus": {
        "lastSyncedAt": "2025-02-20T11:09:25Z",
        "status": "Running"
      },
      "updatedAt": "2025-02-07T14:13:27.847Z"
    },
    "title": null,
    "version": "0.2.66"
  },
  {
    "_id": "integration_LwqsQEp6IeeqC47w",
    "_orgId": "org_9bvYw5M5jLQvJ9G8",
    "changelogDestination": {},
    "clientId": "",
    "config": {
      "createMissingRelatedEntities": false,
      "deleteDependentEntities": true,
      "enableMergeEntity": true,
      "resources": [
        {
          "kind": "work-item",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"workItem\"",
                "identifier": ".id | tostring",
                "properties": {
                  "assigned_to": ".fields.\"System.AssignedTo\".uniqueName | ascii_downcase?",
                  "changedBy": ".fields.\"System.ChangedBy\".uniqueName? | ascii_downcase?",
                  "changedDate": ".fields.\"System.ChangedDate\"",
                  "completed_work": ".fields.\"Microsoft.VSTS.Scheduling.CompletedWork\"",
                  "createdBy": ".fields.\"System.CreatedBy\".uniqueName? | ascii_downcase?",
                  "createdDate": ".fields.\"System.CreatedDate\"",
                  "description": ".fields.\"System.Description\"",
                  "effort": ".fields.\"Microsoft.VSTS.Scheduling.Effort\"",
                  "effort_size": ".fields.\"Microsoft.VSTS.Scheduling.Size\"",
                  "is_request_number": ".fields.\"Federated.IS.RequestNumber\"",
                  "iteration": ".fields.\"System.IterationPath\"",
                  "original_estimate": ".fields.\"Microsoft.VSTS.Scheduling.OriginalEstimate\"",
                  "priority": ".fields.\"Microsoft.VSTS.Common.Priority\"",
                  "reason": ".fields.\"System.Reason\"",
                  "remaining_work": ".fields.\"Microsoft.VSTS.Scheduling.RemainingWork\"",
                  "state": ".fields.\"System.State\"",
                  "tags": "(.fields.\"System.Tags\" | split(\"; \"))?",
                  "type": ".fields.\"System.WorkItemType\""
                },
                "relations": {
                  "parent_work_item": "try (.relations[]? | select(.rel == \"System.LinkTypes.Hierarchy-Reverse\" and .attributes.name == \"Parent\") | .url | split(\"/\")[-1]) // null",
                  "project": ".__project.id | gsub(\" \"; \"\")",
                  "work_item_area": ".fields.\"System.AreaId\" | tostring",
                  "work_item_iteration": ".fields.\"System.IterationId\" | tostring"
                },
                "title": ".fields.\"System.Title\""
              }
            }
          },
          "selector": {
            "query": "true",
            "wiql": "[System.ChangedDate] >= @Today-366 AND NOT [State] in ('Done','Closed','Removed','Resolved','Completed') AND [System.WorkItemType] IN ('Task') AND [System.TeamProject] = 'Federated Projects' ORDER BY [System.Id] DESC"
          }
        },
        {
          "kind": "work-item",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"workItem\"",
                "identifier": ".id | tostring",
                "properties": {
                  "assigned_to": ".fields.\"System.AssignedTo\".uniqueName | ascii_downcase?",
                  "changedBy": ".fields.\"System.ChangedBy\".uniqueName? | ascii_downcase?",
                  "changedDate": ".fields.\"System.ChangedDate\"",
                  "completed_work": ".fields.\"Microsoft.VSTS.Scheduling.CompletedWork\"",
                  "createdBy": ".fields.\"System.CreatedBy\".uniqueName? | ascii_downcase?",
                  "createdDate": ".fields.\"System.CreatedDate\"",
                  "description": ".fields.\"System.Description\"",
                  "effort": ".fields.\"Microsoft.VSTS.Scheduling.Effort\"",
                  "effort_size": ".fields.\"Microsoft.VSTS.Scheduling.Size\"",
                  "is_request_number": ".fields.\"Federated.IS.RequestNumber\"",
                  "iteration": ".fields.\"System.IterationPath\"",
                  "original_estimate": ".fields.\"Microsoft.VSTS.Scheduling.OriginalEstimate\"",
                  "priority": ".fields.\"Microsoft.VSTS.Common.Priority\"",
                  "reason": ".fields.\"System.Reason\"",
                  "remaining_work": ".fields.\"Microsoft.VSTS.Scheduling.RemainingWork\"",
                  "state": ".fields.\"System.State\"",
                  "tags": "(.fields.\"System.Tags\" | split(\"; \"))?",
                  "type": ".fields.\"System.WorkItemType\""
                },
                "relations": {
                  "parent_work_item": "try (.relations[]? | select(.rel == \"System.LinkTypes.Hierarchy-Reverse\" and .attributes.name == \"Parent\") | .url | split(\"/\")[-1]) // null",
                  "project": ".__project.id | gsub(\" \"; \"\")",
                  "work_item_area": ".fields.\"System.AreaId\" | tostring",
                  "work_item_iteration": ".fields.\"System.IterationId\" | tostring"
                },
                "title": ".fields.\"System.Title\""
              }
            }
          },
          "selector": {
            "query": "true",
            "wiql": "NOT [State] in ('Done','Closed','Removed','Resolved','Completed') AND [System.WorkItemType] IN ('Epic') AND [System.TeamProject] = 'Federated Projects'  "
          }
        },
        {
          "kind": "work-item",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"workItem\"",
                "identifier": ".id | tostring",
                "properties": {
                  "assigned_to": ".fields.\"System.AssignedTo\".uniqueName | ascii_downcase?",
                  "changedBy": ".fields.\"System.ChangedBy\".uniqueName? | ascii_downcase?",
                  "changedDate": ".fields.\"System.ChangedDate\"",
                  "completed_work": ".fields.\"Microsoft.VSTS.Scheduling.CompletedWork\"",
                  "createdBy": ".fields.\"System.CreatedBy\".uniqueName? | ascii_downcase?",
                  "createdDate": ".fields.\"System.CreatedDate\"",
                  "description": ".fields.\"System.Description\"",
                  "effort": ".fields.\"Microsoft.VSTS.Scheduling.Effort\"",
                  "effort_size": ".fields.\"Microsoft.VSTS.Scheduling.Size\"",
                  "is_request_number": ".fields.\"Federated.IS.RequestNumber\"",
                  "iteration": ".fields.\"System.IterationPath\"",
                  "original_estimate": ".fields.\"Microsoft.VSTS.Scheduling.OriginalEstimate\"",
                  "priority": ".fields.\"Microsoft.VSTS.Common.Priority\"",
                  "reason": ".fields.\"System.Reason\"",
                  "remaining_work": ".fields.\"Microsoft.VSTS.Scheduling.RemainingWork\"",
                  "state": ".fields.\"System.State\"",
                  "tags": "(.fields.\"System.Tags\" | split(\"; \"))?",
                  "type": ".fields.\"System.WorkItemType\""
                },
                "relations": {
                  "parent_work_item": "try (.relations[]? | select(.rel == \"System.LinkTypes.Hierarchy-Reverse\" and .attributes.name == \"Parent\") | .url | split(\"/\")[-1]) // null",
                  "project": ".__project.id | gsub(\" \"; \"\")",
                  "work_item_area": ".fields.\"System.AreaId\" | tostring",
                  "work_item_iteration": ".fields.\"System.IterationId\" | tostring"
                },
                "title": ".fields.\"System.Title\""
              }
            }
          },
          "selector": {
            "query": "true",
            "wiql": "NOT [State] in ('Done','Closed','Removed','Resolved','Completed') AND [System.WorkItemType] IN ('Feature') AND [System.TeamProject] = 'Federated Projects' "
          }
        },
        {
          "kind": "work-item",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"workItem\"",
                "identifier": ".id | tostring",
                "properties": {
                  "assigned_to": ".fields.\"System.AssignedTo\".uniqueName | ascii_downcase?",
                  "changedBy": ".fields.\"System.ChangedBy\".uniqueName? | ascii_downcase?",
                  "changedDate": ".fields.\"System.ChangedDate\"",
                  "completed_work": ".fields.\"Microsoft.VSTS.Scheduling.CompletedWork\"",
                  "createdBy": ".fields.\"System.CreatedBy\".uniqueName? | ascii_downcase?",
                  "createdDate": ".fields.\"System.CreatedDate\"",
                  "description": ".fields.\"System.Description\"",
                  "effort": ".fields.\"Microsoft.VSTS.Scheduling.Effort\"",
                  "effort_size": ".fields.\"Microsoft.VSTS.Scheduling.Size\"",
                  "is_request_number": ".fields.\"Federated.IS.RequestNumber\"",
                  "iteration": ".fields.\"System.IterationPath\"",
                  "original_estimate": ".fields.\"Microsoft.VSTS.Scheduling.OriginalEstimate\"",
                  "priority": ".fields.\"Microsoft.VSTS.Common.Priority\"",
                  "reason": ".fields.\"System.Reason\"",
                  "remaining_work": ".fields.\"Microsoft.VSTS.Scheduling.RemainingWork\"",
                  "state": ".fields.\"System.State\"",
                  "tags": "(.fields.\"System.Tags\" | split(\"; \"))?",
                  "type": ".fields.\"System.WorkItemType\""
                },
                "relations": {
                  "parent_work_item": "try (.relations[]? | select(.rel == \"System.LinkTypes.Hierarchy-Reverse\" and .attributes.name == \"Parent\") | .url | split(\"/\")[-1]) // null",
                  "project": ".__project.id | gsub(\" \"; \"\")",
                  "work_item_area": ".fields.\"System.AreaId\" | tostring",
                  "work_item_iteration": ".fields.\"System.IterationId\" | tostring"
                },
                "title": ".fields.\"System.Title\""
              }
            }
          },
          "selector": {
            "query": "true",
            "wiql": "NOT [State] in ('Done','Closed','Removed','Resolved','Completed') AND [System.WorkItemType] IN ('Issue', 'Bug', 'Requirement') AND [System.TeamProject] = 'Federated Projects' "
          }
        },
        {
          "kind": "work-item",
          "port": {
            "entity": {
              "mappings": {
                "blueprint": "\"workItem\"",
                "identifier": ".id | tostring",
                "properties": {
                  "assigned_to": ".fields.\"System.AssignedTo\".uniqueName | ascii_downcase?",
                  "changedBy": ".fields.\"System.ChangedBy\".uniqueName? | ascii_downcase?",
                  "changedDate": ".fields.\"System.ChangedDate\"",
                  "completed_work": ".fields.\"Microsoft.VSTS.Scheduling.CompletedWork\"",
                  "createdBy": ".fields.\"System.CreatedBy\".uniqueName? | ascii_downcase?",
                  "createdDate": ".fields.\"System.CreatedDate\"",
                  "description": ".fields.\"System.Description\"",
                  "effort": ".fields.\"Microsoft.VSTS.Scheduling.Effort\"",
                  "effort_size": ".fields.\"Microsoft.VSTS.Scheduling.Size\"",
                  "is_request_number": ".fields.\"Federated.IS.RequestNumber\"",
                  "iteration": ".fields.\"System.IterationPath\"",
                  "original_estimate": ".fields.\"Microsoft.VSTS.Scheduling.OriginalEstimate\"",
                  "priority": ".fields.\"Microsoft.VSTS.Common.Priority\"",
                  "reason": ".fields.\"System.Reason\"",
                  "remaining_work": ".fields.\"Microsoft.VSTS.Scheduling.RemainingWork\"",
                  "state": ".fields.\"System.State\"",
                  "tags": "(.fields.\"System.Tags\" | split(\"; \"))?",
                  "type": ".fields.\"System.WorkItemType\""
                },
                "relations": {
                  "parent_work_item": "try (.relations[]? | select(.rel == \"System.LinkTypes.Hierarchy-Reverse\" and .attributes.name == \"Parent\") | .url | split(\"/\")[-1]) // null",
                  "project": ".__project.id | gsub(\" \"; \"\")",
                  "work_item_area": ".fields.\"System.AreaId\" | tostring",
                  "work_item_iteration": ".fields.\"System.IterationId\" | tostring"
                },
                "title": ".fields.\"System.Title\""
              }
            }
          },
          "selector": {
            "query": "true",
            "wiql": "NOT [State] in ('Done','Closed','Removed','Resolved','Completed') AND [System.WorkItemType] IN ('Product Backlog Item', 'User Story') AND [System.TeamProject] = 'Federated Projects' "
          }
        }
      ]
    },
    "identifier": "work-items-local-dev",
    "installationAppType": "azure-devops",
    "installationId": "work-items-local-dev",
    "installationType": "OnPrem",
    "integrationType": "azure-devops",
    "logAttributes": {
      "ingestId": "Q8DcAISryIdJwQ2n",
      "ingestUrl": "https://ingest.getport.io/logs/integration/Q8DcAISryIdJwQ2n"
    },
    "resyncState": {
      "intervalInMinuets": 1440,
      "lastResyncEnd": "2025-04-16T19:57:32.910865+00:00",
      "lastResyncStart": "2025-04-16T19:12:49.796992+00:00",
      "nextResync": "2025-04-17T19:12:46.669394+00:00",
      "status": "completed",
      "updatedAt": "2025-04-16T19:57:32.990Z"
    },
    "version": "0.1.143"
  }
]